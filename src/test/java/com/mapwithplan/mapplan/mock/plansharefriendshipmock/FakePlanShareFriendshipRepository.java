package com.mapwithplan.mapplan.mock.plansharefriendshipmock;

import com.mapwithplan.mapplan.PlanShareFriendship.domain.PlanShareFriendship;
import com.mapwithplan.mapplan.PlanShareFriendship.service.port.PlanShareFriendshipRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakePlanShareFriendshipRepository implements PlanShareFriendshipRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<PlanShareFriendship> data = new ArrayList<>();


    public PlanShareFriendship create(PlanShareFriendship planShareFriendship) {

        if(planShareFriendship.getId() ==null || planShareFriendship.getId() == 0){
            PlanShareFriendship newPlanShareFriendship = PlanShareFriendship.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .plan(planShareFriendship.getPlan())
                    .friendship(planShareFriendship.getFriendship())
                    .modifiedAt(planShareFriendship.getModifiedAt())
                    .createdAt(planShareFriendship.getCreatedAt())
                    .build();
            data.add(newPlanShareFriendship);
            return newPlanShareFriendship;
        } else{
            data.removeIf(test -> Objects.equals(test.getId(), planShareFriendship.getId()));
            data.add(planShareFriendship);
            return planShareFriendship;
        }
    }

    @Override
    public List<PlanShareFriendship> saveAllSharePlan(List<PlanShareFriendship> planShareFriendships) {
        data.addAll(planShareFriendships);
        return planShareFriendships;
    }
}
