package com.mapwithplan.mapplan.mock.planmock;


import com.mapwithplan.mapplan.common.exception.ResourceNotFoundException;
import com.mapwithplan.mapplan.plan.domain.Plan;
import com.mapwithplan.mapplan.plan.service.port.PlanRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakePlanRepository implements PlanRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Plan> data = new ArrayList<>();

    @Override
    public Plan save(Plan plan) {

        if(plan.getId() ==null || plan.getId() == 0){
            Plan newPlan = Plan.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(plan.getTitle())
                    .content(plan.getContent())
                    .author(plan.getAuthor())
                    .modifiedAt(plan.getModifiedAt())
                    .createdAt(plan.getCreatedAt())
                    .category(plan.getCategory())
                    .appointmentDate(plan.getAppointmentDate())
                    .location(plan.getLocation())
                    .build();
            data.add(newPlan);
            return newPlan;
        } else{
            data.removeIf(test -> Objects.equals(test.getId(), plan.getId()));
            data.add(plan);
            return plan;
        }

    }

    @Override
    public Plan findPlanDetail(Long planId) {
        return data.stream()
                .filter(test -> test.getId()
                .equals(planId))
                .findAny()
                .orElseThrow(() -> new ResourceNotFoundException("Plan", planId));
    }
}
