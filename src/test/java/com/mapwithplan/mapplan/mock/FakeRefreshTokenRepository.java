package com.mapwithplan.mapplan.mock;

import com.mapwithplan.mapplan.common.exception.ResourceNotFoundException;
import com.mapwithplan.mapplan.loginlogout.domain.RefreshToken;
import com.mapwithplan.mapplan.loginlogout.service.port.RefreshTokenRepository;
import com.mapwithplan.mapplan.member.domain.EMemberStatus;
import com.mapwithplan.mapplan.member.domain.Member;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<RefreshToken> data = new ArrayList<>();
    @Override
    public Optional<RefreshToken> findByMember(Member member) {

        return data.stream().filter(item ->item.getMember().equals(member)).findAny();
    }

    @Override
    public void delete(String refreshToken) {
        RefreshToken byToken = findByToken(refreshToken);
        data.remove(byToken);
    }

    @Override
    public RefreshToken save(RefreshToken refreshToken) {
        if(refreshToken.getId() ==null || refreshToken.getId() == 0){
            RefreshToken newRefreshToken = RefreshToken.builder()
                    .token(refreshToken.getToken())
                    .id(autoGeneratedId.incrementAndGet())
                    .member(refreshToken.getMember())
                    .build();
            data.add(newRefreshToken);
            return newRefreshToken;
        } else{
            data.removeIf(test -> Objects.equals(test.getId(), refreshToken.getId()));
            data.add(refreshToken);
            return refreshToken;
        }
    }

    @Override
    public RefreshToken findByToken(String refreshToken) {
        return data.stream().filter(item ->
                        item.getToken().equals(refreshToken))
                .findAny()
                .orElseThrow(()-> new ResourceNotFoundException("RefreshToken",refreshToken));

    }

    @Override
    public void update(RefreshToken refreshToken) {

    }
}
